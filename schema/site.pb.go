// Code generated by protoc-gen-go.
// source: site.proto
// DO NOT EDIT!

/*
Package schema is a generated protocol buffer package.

It is generated from these files:
	site.proto

It has these top-level messages:
	RegisterCall
	LoginCall
	InfoCall
	User
*/
package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterCall struct {
	User            *User  `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Password        string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	PasswordConfirm string `protobuf:"bytes,3,opt,name=password_confirm,json=passwordConfirm" json:"password_confirm,omitempty"`
}

func (m *RegisterCall) Reset()                    { *m = RegisterCall{} }
func (m *RegisterCall) String() string            { return proto.CompactTextString(m) }
func (*RegisterCall) ProtoMessage()               {}
func (*RegisterCall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterCall) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RegisterCall) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterCall) GetPasswordConfirm() string {
	if m != nil {
		return m.PasswordConfirm
	}
	return ""
}

type LoginCall struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginCall) Reset()                    { *m = LoginCall{} }
func (m *LoginCall) String() string            { return proto.CompactTextString(m) }
func (*LoginCall) ProtoMessage()               {}
func (*LoginCall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginCall) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginCall) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type InfoCall struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *InfoCall) Reset()                    { *m = InfoCall{} }
func (m *InfoCall) String() string            { return proto.CompactTextString(m) }
func (*InfoCall) ProtoMessage()               {}
func (*InfoCall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InfoCall) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type User struct {
	Username      string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Email         string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	IsAdmin       bool   `protobuf:"varint,3,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	IsDj          bool   `protobuf:"varint,4,opt,name=is_dj,json=isDj" json:"is_dj,omitempty"`
	TwitterHandle string `protobuf:"bytes,5,opt,name=twitter_handle,json=twitterHandle" json:"twitter_handle,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *User) GetIsDj() bool {
	if m != nil {
		return m.IsDj
	}
	return false
}

func (m *User) GetTwitterHandle() string {
	if m != nil {
		return m.TwitterHandle
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterCall)(nil), "schema.RegisterCall")
	proto.RegisterType((*LoginCall)(nil), "schema.LoginCall")
	proto.RegisterType((*InfoCall)(nil), "schema.InfoCall")
	proto.RegisterType((*User)(nil), "schema.User")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	Register(ctx context.Context, in *RegisterCall, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *LoginCall, opts ...grpc.CallOption) (*User, error)
	Info(ctx context.Context, in *InfoCall, opts ...grpc.CallOption) (*User, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) Register(ctx context.Context, in *RegisterCall, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/schema.Users/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Login(ctx context.Context, in *LoginCall, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/schema.Users/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Info(ctx context.Context, in *InfoCall, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/schema.Users/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	Register(context.Context, *RegisterCall) (*User, error)
	Login(context.Context, *LoginCall) (*User, error)
	Info(context.Context, *InfoCall) (*User, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Users/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Register(ctx, req.(*RegisterCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Users/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Login(ctx, req.(*LoginCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Users/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Info(ctx, req.(*InfoCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "schema.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Users_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Users_Login_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Users_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "site.proto",
}

func init() { proto.RegisterFile("site.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x4a, 0xf3, 0x30,
	0x14, 0xc7, 0xe9, 0xbe, 0x76, 0x5f, 0x77, 0xbe, 0x7d, 0x3a, 0xb3, 0x29, 0xb5, 0x8a, 0x8c, 0x80,
	0x32, 0x6f, 0x56, 0x9c, 0x4f, 0xa0, 0x53, 0x50, 0x10, 0x2f, 0x0a, 0xbb, 0x2e, 0x71, 0xcd, 0xba,
	0x8c, 0x36, 0x19, 0x49, 0x74, 0xf7, 0xbe, 0x80, 0x17, 0x3e, 0x9a, 0x6f, 0x20, 0x3e, 0x88, 0x34,
	0x5d, 0x86, 0x1b, 0xa8, 0x77, 0x3d, 0xff, 0xe6, 0xfc, 0xfe, 0x39, 0xff, 0x13, 0x00, 0xc5, 0x34,
	0xed, 0xcf, 0xa5, 0xd0, 0x02, 0xd5, 0xd5, 0x78, 0x4a, 0x0b, 0x12, 0x1e, 0x66, 0x42, 0x64, 0x39,
	0x8d, 0xc8, 0x9c, 0x45, 0x84, 0x73, 0xa1, 0x89, 0x66, 0x82, 0xab, 0xea, 0x14, 0x5e, 0x40, 0x33,
	0xa6, 0x19, 0x53, 0x9a, 0xca, 0x21, 0xc9, 0x73, 0xd4, 0x05, 0xf7, 0x51, 0x51, 0x19, 0x38, 0x5d,
	0xa7, 0xf7, 0x6f, 0xd0, 0xec, 0x57, 0x90, 0xfe, 0x48, 0x51, 0x19, 0x9b, 0x3f, 0x28, 0x04, 0x7f,
	0x4e, 0x94, 0x5a, 0x08, 0x99, 0x06, 0xb5, 0xae, 0xd3, 0x6b, 0xc4, 0xab, 0x1a, 0x9d, 0x42, 0xcb,
	0x7e, 0x27, 0x63, 0xc1, 0x27, 0x4c, 0x16, 0xc1, 0x1f, 0x73, 0x66, 0xdb, 0xea, 0xc3, 0x4a, 0xc6,
	0x43, 0x68, 0xdc, 0x89, 0x8c, 0x71, 0xe3, 0x1a, 0x82, 0x5f, 0xb2, 0x39, 0x29, 0xa8, 0x71, 0x6e,
	0xc4, 0xab, 0xfa, 0x27, 0x3f, 0x7c, 0x02, 0xfe, 0x2d, 0x9f, 0x88, 0xdf, 0x18, 0xf8, 0xc5, 0x01,
	0x77, 0xb4, 0xbc, 0xfc, 0xb7, 0x46, 0x1d, 0xf0, 0x68, 0x41, 0x58, 0xbe, 0x74, 0xa9, 0x0a, 0xb4,
	0x0f, 0x3e, 0x53, 0x09, 0x49, 0x0b, 0xc6, 0xcd, 0x28, 0x7e, 0xfc, 0x97, 0xa9, 0x8b, 0xb2, 0x44,
	0x6d, 0xf0, 0x98, 0x4a, 0xd2, 0x59, 0xe0, 0x1a, 0xdd, 0x65, 0xea, 0x6a, 0x86, 0x8e, 0x61, 0x4b,
	0x2f, 0x98, 0xd6, 0x54, 0x26, 0x53, 0xc2, 0xd3, 0x9c, 0x06, 0x9e, 0xc1, 0xfd, 0x5f, 0xaa, 0x37,
	0x46, 0x1c, 0xbc, 0x3b, 0xe0, 0x95, 0x37, 0x52, 0xe8, 0x1e, 0x7c, 0xbb, 0x01, 0xd4, 0xb1, 0x79,
	0x7f, 0xdd, 0x49, 0xb8, 0xb6, 0x05, 0x7c, 0xf4, 0xfc, 0xf6, 0xf1, 0x5a, 0x0b, 0xf0, 0x5e, 0xf4,
	0x74, 0x66, 0x96, 0x5a, 0x0e, 0xa0, 0x22, 0x69, 0x19, 0xd7, 0xe0, 0x99, 0x60, 0xd1, 0x8e, 0x6d,
	0x5b, 0xe5, 0xbc, 0x41, 0x3a, 0x30, 0xa4, 0x5d, 0xdc, 0x5e, 0x27, 0xe5, 0xa6, 0xfb, 0x12, 0xdc,
	0x32, 0x5a, 0xd4, 0xb2, 0x2d, 0x36, 0xe8, 0x0d, 0x48, 0x68, 0x20, 0x1d, 0x84, 0xd6, 0x21, 0x8c,
	0x4f, 0xc4, 0x43, 0xdd, 0xbc, 0xb1, 0xf3, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x60, 0x07, 0x6a,
	0x34, 0x97, 0x02, 0x00, 0x00,
}
